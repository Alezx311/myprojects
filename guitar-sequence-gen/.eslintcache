[{"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\index.js":"1","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\App.js":"2","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\GuitarFretboard\\index.js":"3","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\GuitarFretboard\\Setup.js":"4","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\index.js":"5","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Setup.js":"6","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\View.js":"7","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Player.js":"8","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Helpers.js":"9","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\List.js":"10","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\types.js":"11","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\actions.js":"12","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\reducers.js":"13","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\ListElement.js":"14"},{"size":479,"mtime":1610473949030,"results":"15","hashOfConfig":"16"},{"size":445,"mtime":1610466783678,"results":"17","hashOfConfig":"16"},{"size":10143,"mtime":1610306784838,"results":"18","hashOfConfig":"16"},{"size":2835,"mtime":1610257457609,"results":"19","hashOfConfig":"16"},{"size":516,"mtime":1610467967929,"results":"20","hashOfConfig":"16"},{"size":1119,"mtime":1610475831918,"results":"21","hashOfConfig":"16"},{"size":386,"mtime":1610467651937,"results":"22","hashOfConfig":"16"},{"size":610,"mtime":1610470531845,"results":"23","hashOfConfig":"16"},{"size":8266,"mtime":1610466101931,"results":"24","hashOfConfig":"16"},{"size":278,"mtime":1610475276048,"results":"25","hashOfConfig":"16"},{"size":372,"mtime":1610473922912,"results":"26","hashOfConfig":"16"},{"size":408,"mtime":1610475665996,"results":"27","hashOfConfig":"16"},{"size":1328,"mtime":1610474018565,"results":"28","hashOfConfig":"16"},{"size":783,"mtime":1610476004717,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1h4epz1",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\index.js",[],["60","61"],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\App.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\GuitarFretboard\\index.js",["62","63"],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\GuitarFretboard\\Setup.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\index.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Setup.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\View.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Player.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\Helpers.js",["64","65","66","67","68","69","70","71","72","73","74","75","76"],"// const Teoria = require('teoria')\r\nimport * as Teoria from 'teoria'\r\n\r\n// Немного музыкальных констант\r\nexport const MUSIC_VALUES = {\r\n  // Гитарные строи\r\n  TUNINGS: [\r\n    { name: 'E Standart', value: ['E2', 'A2', 'D3', 'G3', 'B4', 'E4'] },\r\n    { name: 'Drop D', value: ['D2', 'A2', 'D3', 'G3', 'B4', 'E4'] },\r\n    { name: 'Drop C', value: ['C2', 'G2', 'C3', 'F3', 'A4', 'D4'] },\r\n    { name: 'Drop B', value: ['B2', 'F#2', 'B3', 'E3', 'G#3', 'C#4'] }\r\n  ],\r\n  // Названия нот\r\n  NOTES: ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'F', 'E', 'E#', 'G', 'G#'],\r\n  // Названия гамм\r\n  SCALES: [\r\n    'major',\r\n    'minor',\r\n    'ionian',\r\n    'dorian',\r\n    'phrygian',\r\n    'lydian',\r\n    'mixolydian',\r\n    'aeolian',\r\n    'locrian',\r\n    'majorpentatonic',\r\n    'minorpentatonic',\r\n    'chromatic',\r\n    'harmonicchromatic',\r\n    'blues',\r\n    'doubleharmonic',\r\n    'flamenco',\r\n    'harmonicminor',\r\n    'melodicminor',\r\n    'wholetone'\r\n  ],\r\n  // Максимальный отступ на грифе для генератора играбельных риффов\r\n  FRETBOARD_STEP_LENGTH: 3\r\n}\r\n// Настройки по умолчанию\r\nconst DEFAULTS = {\r\n  KEY: 'C',\r\n  START_OCTAVE: 2,\r\n  SCALES: 'minor',\r\n  PATTERN_LENGTH: 20,\r\n  SIZE1: 4,\r\n  SIZE2: 4,\r\n  OCTAVE_MIN: 2,\r\n  OCTAVE_MAX: 6,\r\n  PATTERN_REPEAT_TONICAL_NOTE_EVERY: 8,\r\n  PATTERN_EXAMPLE_SIZE: 8\r\n}\r\n\r\n//* Генераторы и часто используемые функции\r\n// Случайное число\r\nconst randNumber = (max = 100) => Math.ceil(Math.random() * max)\r\n// Случайная степень двойки, для длительности нот, например\r\nconst randPowerOfTwo = (max_power = 7) => parseInt(2 ** randNumber(max_power))\r\n// Случайный елемент массива\r\nconst randArrayElement = array => array[Math.floor(Math.random() * array.length)]\r\n// True или False c указанной вероятностью\r\nconst randChance = percents => parseInt(percents) > randNumber(100)\r\n// Случайная нота, если дать массив с гаммой, выберет из неё\r\nconst randNote = (arr = MUSIC_VALUES.NOTES) => randArrayElement(arr)\r\n// Случайная октава\r\nconst randOctave = (max = DEFAULTS.OCTAVE_MAX) => 2 + randNumber(max)\r\n// То же что и randNote но добавляет значение октавы\r\nconst randNoteAndOctave = (arr = MUSIC_VALUES.NOTES) => randNote(arr) + randOctave()\r\n// Случайный строй гитары\r\nconst randTuning = () => randArrayElement(MUSIC_VALUES.TUNINGS)\r\n// Случайное название строя гитары\r\nconst randTuningName = () => randArrayElement(MUSIC_VALUES.TUNINGS).name\r\n// Случайное название гаммы\r\nconst randScaleName = () => randArrayElement(MUSIC_VALUES.SCALES)\r\n// Случайная метка длительности\r\nconst randDurationSymbol = () => randArrayElement(['n', 'm', 't', 's'])\r\n// Случайная относительная длительность\r\nconst randDurationRelative = (max_power = 5) => `${randPowerOfTwo(max_power)}${randDurationSymbol()}`\r\n// Случайное абсолютная длительность в мс\r\nconst randDurationAbsolute = (max_ms = 5000) => randNumber(max_ms)\r\n// Конвертер мс в секунды\r\nconst msToSec = ms => parseInt(ms / 1000)\r\n// Конвертер секунд в мс\r\nconst secToMs = sec => parseInt(sec * 1000)\r\n// Соединяет ноту и октаву в строку\r\nconst joinNoteAndOctave = (note, octave) => `${note}${octave}`\r\n// Берёт ноту из строки\r\nconst noteFromStr = str => str.match(/[a-z#]+/i)?.[1]\r\n// Берёт октаву из строки\r\nconst octaveFromStr = str => str.match(/\\d/i)?.[1]\r\n// Обьект с пустыми значениями, для инициализаций в будущем\r\nconst musicEventObject = () => ({ note: null, duration: null, octave: null, index: null })\r\n// Музыкальная фраза в виде текста\r\nconst patternToText = arr => arr.map(val => `${val.note}`).join(' -> ')\r\n// Разделитель для текста\r\nconst textDivider = `\\n${'-'.repeat(50)}\\n`\r\n// Обьект в текст\r\nconst objectToText = obj => Object.entries(obj)\r\n// Настройки для генерации, обьединяет полученные с настройками по умолчанию\r\nconst getGenerateOptions = optObj => {\r\n  const generateOptions = {\r\n    createdAt: Date.now(),\r\n    key: optObj?.key ?? DEFAULTS.KEY,\r\n    start_octave: parseInt(optObj?.start_octave ?? DEFAULTS.START_OCTAVE),\r\n    scale: optObj?.scale ?? DEFAULTS.SCALES,\r\n    size: parseInt(optObj?.size ?? DEFAULTS.PATTERN_LENGTH),\r\n    repeatEvery: parseInt(optObj?.repeatEvery ?? DEFAULTS.PATTERN_REPEAT_TONICAL_NOTE_EVERY)\r\n  }\r\n\r\n  return generateOptions\r\n}\r\n\r\n// Генерация музыкальных фраз\r\n//? @key - Тональность\r\n//? @start_octave - Начальная октава\r\n//? @scale - Гамма\r\n//? @size - Длина фразы\r\n//? @repeatTonicalNote - Повторять тонику каждую n ноту\r\nconst Pattern = optionsObject => {\r\n  const options = getGenerateOptions(optionsObject)\r\n  const { key, start_octave, scale, size, repeatEvery } = options\r\n\r\n  const mainNote = joinNoteAndOctave(key, start_octave)\r\n  const mainDuration = randDurationRelative()\r\n  const mainNoteObj = { note: mainNote, duration: mainDuration }\r\n\r\n  const MusicNote = Teoria.note(mainNote)\r\n  const notesArray = MusicNote.scale(scale).simple()\r\n  const durationsArray = Array(4)\r\n    .fill(1)\r\n    .map(val => randDurationRelative())\r\n\r\n  // TODO Для играбельной версии, будет создавать мелодию, проверяя играбельность на грифе.\r\n  // Каждая след нота должна быть не дальше 3 ладов, должна не выбиватся из композиции и быть уместной.\r\n  const stepsVersion = Array(size).fill(mainNoteObj)\r\n\r\n  // Версия со случайными значениями\r\n  const randomizedVersion = Array(size)\r\n    .fill(1)\r\n    .map(obj => ({\r\n      note: randArrayElement(notesArray),\r\n      duration: randArrayElement(durationsArray)\r\n    }))\r\n\r\n  // Версия с повторениями тоники каждые n нот\r\n  const repeatsVersion = randomizedVersion.map((patternValue, patternIndex) => {\r\n    if (patternIndex % repeatEvery === 0) return patternValue\r\n\r\n    patternValue.note = randArrayElement(notesArray)\r\n    patternValue.duration = randArrayElement(durationsArray)\r\n\r\n    return patternValue\r\n  })\r\n\r\n  // Информационное сообщение для быстрого просмотра фраз и тд\r\n  const patternInfo = `Patterns generated successfully!\r\nCreated on ${Date.now() - options.createdAt} ms\r\nReceived Values: ${objectToText(optionsObject)}\r\nDefault Values: ${objectToText(DEFAULTS)}\r\n${textDivider}\r\nRandomized Version: \r\n${textDivider}\r\n${patternToText(randomizedVersion)}\r\n${textDivider}\r\nWith Tonical Note Repeats Version:\r\n${textDivider}\r\n${patternToText(repeatsVersion)}\r\n${textDivider}`.trim()\r\n\r\n  // console.log(patternInfo)\r\n\r\n  //? return { randomizedVersion, repeatsVersion, patternInfo }\r\n  return repeatsVersion\r\n}\r\n// Генерация последовательности уникальных фраз\r\nconst Sequence = optionsObject => {\r\n  const options = getGenerateOptions(optionsObject)\r\n\r\n  const patterns = Array(100)\r\n    .fill(1)\r\n    .map(val => Pattern(options))\r\n\r\n  return new Set([...patterns])\r\n}\r\n// Генерация указанного количества примеров\r\nconst getExamples = (examples_size = 4) => {\r\n  const pattOptions = {\r\n    size: DEFAULTS.PATTERN_EXAMPLE_SIZE\r\n  }\r\n\r\n  const examples = Array(examples_size)\r\n    .fill(1)\r\n    .map(val => {\r\n      const pattern = Pattern(pattOptions)\r\n      const sequence = Sequence(pattOptions)\r\n\r\n      console.dir(pattern)\r\n      console.dir(sequence)\r\n\r\n      return { pattern, sequence }\r\n    })\r\n\r\n  return examples\r\n}\r\ngetExamples(1)\r\n","C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\List.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\types.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\actions.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\store\\reducers.js",[],"C:\\Programming\\myprojects\\guitar-sequence-gen\\src\\components\\MelodyGenerator\\ListElement.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":7,"column":7,"nodeType":"83","messageId":"84","endLine":7,"endColumn":19},{"ruleId":"81","severity":1,"message":"85","line":63,"column":7,"nodeType":"83","messageId":"84","endLine":63,"endColumn":15},{"ruleId":"81","severity":1,"message":"86","line":62,"column":7,"nodeType":"83","messageId":"84","endLine":62,"endColumn":17},{"ruleId":"81","severity":1,"message":"87","line":68,"column":7,"nodeType":"83","messageId":"84","endLine":68,"endColumn":24},{"ruleId":"81","severity":1,"message":"88","line":70,"column":7,"nodeType":"83","messageId":"84","endLine":70,"endColumn":17},{"ruleId":"81","severity":1,"message":"89","line":72,"column":7,"nodeType":"83","messageId":"84","endLine":72,"endColumn":21},{"ruleId":"81","severity":1,"message":"90","line":74,"column":7,"nodeType":"83","messageId":"84","endLine":74,"endColumn":20},{"ruleId":"81","severity":1,"message":"91","line":80,"column":7,"nodeType":"83","messageId":"84","endLine":80,"endColumn":27},{"ruleId":"81","severity":1,"message":"92","line":82,"column":7,"nodeType":"83","messageId":"84","endLine":82,"endColumn":14},{"ruleId":"81","severity":1,"message":"93","line":84,"column":7,"nodeType":"83","messageId":"84","endLine":84,"endColumn":14},{"ruleId":"81","severity":1,"message":"94","line":88,"column":7,"nodeType":"83","messageId":"84","endLine":88,"endColumn":18},{"ruleId":"81","severity":1,"message":"95","line":90,"column":7,"nodeType":"83","messageId":"84","endLine":90,"endColumn":20},{"ruleId":"81","severity":1,"message":"96","line":92,"column":7,"nodeType":"83","messageId":"84","endLine":92,"endColumn":23},{"ruleId":"81","severity":1,"message":"97","line":135,"column":9,"nodeType":"83","messageId":"84","endLine":135,"endColumn":21},{"ruleId":"81","severity":1,"message":"98","line":156,"column":9,"nodeType":"83","messageId":"84","endLine":156,"endColumn":20},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'randSeqArray' is assigned a value but never used.","Identifier","unusedVar","'NoteLogs' is defined but never used.","'randChance' is assigned a value but never used.","'randNoteAndOctave' is assigned a value but never used.","'randTuning' is assigned a value but never used.","'randTuningName' is assigned a value but never used.","'randScaleName' is assigned a value but never used.","'randDurationAbsolute' is assigned a value but never used.","'msToSec' is assigned a value but never used.","'secToMs' is assigned a value but never used.","'noteFromStr' is assigned a value but never used.","'octaveFromStr' is assigned a value but never used.","'musicEventObject' is assigned a value but never used.","'stepsVersion' is assigned a value but never used.","'patternInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]